selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
#   rCharts::chartOutput('myplot', 'datamaps')
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
# output$myplot = rMa::renderChart2({
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "https://dl.dropboxusercontent.com/u/13661419/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
detach("package:rCharts", unload=TRUE)
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
#   rCharts::chartOutput('myplot', 'datamaps')
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
# output$myplot = rMa::renderChart2({
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "https://dl.dropboxusercontent.com/u/13661419/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
library("rCharts", lib.loc="C:/Users/torreju/Documents/R/win-library/3.1")
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
#   rCharts::chartOutput('myplot', 'datamaps')
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
# output$myplot = rMa::renderChart2({
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "https://dl.dropboxusercontent.com/u/13661419/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
detach("package:rCharts", unload=TRUE)
install.packages(c("googleVis", "leafletR"))
library("devtools", lib.loc="C:/Users/torreju/Documents/R/win-library/3.1")
install_github('rCharts', 'ramnathv')
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
#   rCharts::chartOutput('myplot', 'datamaps')
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
# output$myplot = rMa::renderChart2({
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "https://dl.dropboxusercontent.com/u/13661419/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
library("rCharts", lib.loc="C:/Users/torreju/Documents/R/win-library/3.1")
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
#   rCharts::chartOutput('myplot', 'datamaps')
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
# output$myplot = rMa::renderChart2({
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "https://dl.dropboxusercontent.com/u/13661419/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
detach("package:rMaps", unload=TRUE)
library("rMaps", lib.loc="C:/Users/torreju/Documents/R/win-library/3.1")
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
#   rCharts::chartOutput('myplot', 'datamaps')
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
# output$myplot = rMa::renderChart2({
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "https://dl.dropboxusercontent.com/u/13661419/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
#save(info1, file = "info1.RData")
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
#   rCharts::chartOutput('myplot', 'datamaps')
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
# output$myplot = rMa::renderChart2({
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "E:/Juan/data_cleaning/nuts2/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd', 'Greens', 'YlOrRd', 'PuBu')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
chartOutput("myplot", 'datamaps')
)
),
server = function(input, output, session){
output$myplot<- renderChart2({
d1 <-  ichoropleth(
Population ~ name,
labels = TRUE,
data = info1,
pal = input$pal,
ncuts = input$ncuts,
legend = TRUE,
#       animate = 'year',
#       play = TRUE,
)
d1$set(
geographyConfig = list(
dataUrl = "https://dl.dropboxusercontent.com/u/13661419/states2.json",
highlightFillColor = 'orange',
highlightBorderColor = 'white',
highlightBorderWidth = 1.5,
popupOnHover = TRUE,
popupTemplate = "#! function(geography, data){
return '<div class=hoverinfo>' + geography.properties.name +
': ' + data.Population+ '</div>';
} !#"
),
scope = 'nuts2wgs2',
height = 1050,
legend = TRUE,
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.scale(480)
.center([29.34034978813841, 65.012062015793])
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1
})
}
))
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
shiny::runApp('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
setwd('E:/Juan/public/')
getwd()
setwd('E:/Juan/shiny/public/')
runApp()
shiny::runApp("shiny")
runApp()
load('data.RData')
runApp()
names(data)
runApp()
runApp()
runApp()
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
shiny::runGitHub('ShinyApps', 'jbryer', subdir='gambler')
devtools::install_github("rstudio/shinyapps")
runGitHub('shiny-app', 'Arevaju')
load('data.RData')
runApp()
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
getwd()
dir()
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
runGitHub('shiny-app', 'Arevaju')
